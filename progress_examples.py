"""Examples of using progress indicators in bot operations."""

import asyncio
from telegram import Update, Message
from telegram.ext import ContextTypes
from progress_utils import (
    ProgressBarIndicator, 
    SpinnerIndicator, 
    TaskProgressManager,
    AdaptiveProgressIndicator,
    show_step_progress
)

# Example 1: Using ProgressBarIndicator for file processing
async def process_large_file_example(message: Message) -> None:
    """Example of processing a large file with progress bar"""
    
    # Create progress bar for 10 steps
    progress_msg = await message.reply_text("üìä –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞...")
    progress_bar = ProgressBarIndicator(progress_msg, 10, "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞")
    
    await progress_bar.start()
    
    # Simulate file processing steps
    steps = [
        "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞", 
        "–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ",
        "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
        "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏",
        "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏",
        "–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏",
        "–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ",
        "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
    ]
    
    for i, step in enumerate(steps):
        await asyncio.sleep(1)  # Simulate processing time
        await progress_bar.update(i + 1, step)
    
    await progress_bar.complete("üéâ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")


# Example 2: Using SpinnerIndicator for multi-phase operations
async def multi_phase_synthesis_example(message: Message) -> None:
    """Example of multi-phase TTS synthesis with different spinners"""
    
    progress_msg = await message.reply_text("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...")
    
    # Define phases with different animations
    phases = [
        {
            'text': '–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò...',
            'frames': SpinnerIndicator.SPINNER_FRAMES,
            'duration': 0.15
        },
        {
            'text': '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏...',
            'frames': SpinnerIndicator.DOTS_FRAMES,
            'duration': 0.12
        },
        {
            'text': '–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)...',
            'frames': SpinnerIndicator.CLOCK_FRAMES,
            'duration': 0.2
        }
    ]
    
    spinner = SpinnerIndicator(progress_msg, phases)
    await spinner.start()
    
    # Simulate phase transitions
    await asyncio.sleep(3)
    await spinner.next_phase()
    
    await asyncio.sleep(2)
    await spinner.next_phase()
    
    await asyncio.sleep(4)
    await spinner.stop()
    
    await progress_msg.edit_text("‚úÖ –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")


# Example 3: Using TaskProgressManager for complex workflows
async def complex_workflow_example(message: Message) -> None:
    """Example of complex workflow with task tracking"""
    
    tasks = [
        "–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API",
        "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞",
        "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ò–ò-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        "–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–∏–Ω—Ç–µ–∑",
        "–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏–æ-–¥–∞–Ω–Ω—ã—Ö",
        "–ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ",
        "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–µ—à"
    ]
    
    manager = await show_step_progress(message, tasks)
    
    # Simulate task execution
    for i in range(len(tasks)):
        await asyncio.sleep(0.8)  # Simulate work
        await manager.next_task()
    
    await manager.complete("üöÄ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")


# Example 4: Using AdaptiveProgressIndicator
async def adaptive_progress_example(message: Message) -> None:
    """Example of adaptive progress that changes based on duration"""
    
    progress_msg = await message.reply_text("‚ö° –ë—ã—Å—Ç—Ä–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è...")
    indicator = AdaptiveProgressIndicator(progress_msg, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å")
    
    await indicator.start()
    
    # Simulate a potentially long operation
    await asyncio.sleep(3)  # This will trigger the upgrade to animated indicator
    
    await indicator.update_text("–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–π–º–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏...")
    await asyncio.sleep(2)
    
    await indicator.update_text("–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ...")
    await asyncio.sleep(1)
    
    await indicator.stop()
    await progress_msg.edit_text("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


# Example 5: Enhanced TTS function with progress indicators
async def enhanced_tts_with_progress(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Enhanced TTS function with sophisticated progress indicators"""
    
    message = update.message
    text = message.text
    
    # Determine appropriate progress indicator based on text complexity
    text_length = len(text)
    word_count = len(text.split())
    
    if text_length < 100:
        # Simple quick operation
        progress_msg = await message.reply_text("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Å–∏–Ω—Ç–µ–∑...")
        await asyncio.sleep(1)
        await progress_msg.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ!")
        
    elif text_length < 500:
        # Medium complexity - use spinner
        await multi_phase_synthesis_example(message)
        
    elif text_length < 1000:
        # Complex text - use task manager
        await complex_workflow_example(message)
        
    else:
        # Very long text - use progress bar
        await process_large_file_example(message)


# Example 6: Real-world integration with error handling
async def robust_tts_with_progress(text: str, message: Message) -> None:
    """Real-world TTS with robust progress handling"""
    
    progress_msg = await message.reply_text("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞...")
    
    try:
        # Determine the best progress indicator
        if len(text) > 200:
            # Use task progress for longer texts
            tasks = [
                "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞",
                "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏", 
                "–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏",
                "–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ"
            ]
            
            manager = TaskProgressManager(progress_msg, tasks)
            await manager.start()
            
            # Step 1: Text analysis
            await asyncio.sleep(1)
            await manager.next_task()
            
            # Step 2: Markup generation
            await asyncio.sleep(1.5)
            await manager.next_task()
            
            # Step 3: Speech synthesis (longest step)
            await asyncio.sleep(3)
            await manager.next_task()
            
            # Step 4: Audio encoding
            await asyncio.sleep(0.5)
            await manager.complete("üéµ –ê—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ!")
            
        else:
            # Use simple animated progress for shorter texts
            from bot import ProgressIndicator, VOICE_PROGRESS_FRAMES
            
            indicator = ProgressIndicator(
                progress_msg, 
                "–°–∏–Ω—Ç–µ–∑–∏—Ä—É—é —Ä–µ—á—å...",
                VOICE_PROGRESS_FRAMES
            )
            await indicator.start()
            
            # Simulate synthesis
            await asyncio.sleep(2)
            
            await indicator.stop()
            await progress_msg.edit_text("‚úÖ –°–∏–Ω—Ç–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            
    except Exception as e:
        # Handle errors gracefully
        await progress_msg.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ: {str(e)[:100]}..."
        )


# Example 7: Batch processing with progress
async def batch_tts_with_progress(messages: list, telegram_message: Message) -> None:
    """Process multiple TTS requests with progress tracking"""
    
    if not messages:
        await telegram_message.reply_text("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    progress_msg = await telegram_message.reply_text("üìä –ó–∞–ø—É—Å–∫–∞—é –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    
    # Create progress bar for batch processing
    progress_bar = ProgressBarIndicator(
        progress_msg, 
        len(messages), 
        "–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ TTS"
    )
    
    await progress_bar.start()
    
    results = []
    for i, msg in enumerate(messages):
        status = f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ {i + 1}: {msg[:30]}..."
        await progress_bar.update(i + 1, status)
        
        # Simulate processing
        await asyncio.sleep(0.5)
        results.append(f"processed_{i}")
    
    await progress_bar.complete(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} —Å–æ–æ–±—â–µ–Ω–∏–π!")
    
    return results


# Example 8: Context-aware progress selection
def select_progress_indicator(operation_type: str, complexity: int, message: Message):
    """Select appropriate progress indicator based on operation context"""
    
    if operation_type == "quick_tts" and complexity < 50:
        return "simple"
    elif operation_type == "ai_formatting" or complexity > 100:
        return "spinner"
    elif operation_type == "batch_processing":
        return "progress_bar"
    elif operation_type == "ssml_synthesis":
        return "task_manager"
    else:
        return "adaptive"


# Usage examples in bot commands
async def demo_progress_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Command to demonstrate different progress indicators"""
    
    if not context.args:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /demo_progress [—Ç–∏–ø]\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:\n"
            "‚Ä¢ bar - –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä\n"
            "‚Ä¢ spinner - –º–Ω–æ–≥–æ—Ñ–∞–∑–Ω—ã–π —Å–ø–∏–Ω–Ω–µ—Ä\n"
            "‚Ä¢ tasks - –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á\n"
            "‚Ä¢ adaptive - –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
            "‚Ä¢ batch - –ø–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"
        )
        return
    
    progress_type = context.args[0].lower()
    
    if progress_type == "bar":
        await process_large_file_example(update.message)
    elif progress_type == "spinner":
        await multi_phase_synthesis_example(update.message)
    elif progress_type == "tasks":
        await complex_workflow_example(update.message)
    elif progress_type == "adaptive":
        await adaptive_progress_example(update.message)
    elif progress_type == "batch":
        test_messages = ["–ü—Ä–∏–≤–µ—Ç", "–ö–∞–∫ –¥–µ–ª–∞?", "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?", "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è"]
        await batch_tts_with_progress(test_messages, update.message)
    else:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")


# Integration with existing bot handlers
async def enhanced_handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Enhanced text handler with intelligent progress selection"""
    
    message = update.message
    text = message.text
    
    # Analyze text to choose appropriate progress indicator
    text_length = len(text)
    has_special_chars = any(char in text for char in "<>[]{}()")
    
    if text_length < 50:
        # Quick operation - minimal progress
        await message.chat.send_action("upload_voice")
        progress_msg = await message.reply_text("‚ö° –°–∏–Ω—Ç–µ–∑...")
        await asyncio.sleep(1)
        await progress_msg.delete()
        
    elif text_length < 200 and not has_special_chars:
        # Standard operation - animated progress
        await robust_tts_with_progress(text, message)
        
    elif has_special_chars:
        # Complex markup - task-based progress
        await complex_workflow_example(message)
        
    else:
        # Long text - progress bar
        await process_large_file_example(message) 